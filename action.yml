name: 'Auto Docs Action'
description: 'Automatically update Python docstrings using Claude Code CLI'
author: 'Dominique Garmier'

branding:
  icon: 'book-open'
  color: 'blue'

inputs:
  anthropic_api_key:
    description: 'Your Anthropic API key for Claude Code'
    required: true
  max_retries:
    description: 'Maximum number of retry attempts per file'
    required: false
    default: '2'
  claude_command:
    description: 'Path to Claude Code CLI executable'
    required: false
    default: 'claude'

outputs:
  files_processed:
    description: 'Total number of Python files processed'
  files_successful:
    description: 'Number of files successfully updated'
  files_failed:
    description: 'Number of files that failed processing'

runs:
  using: 'composite'
  steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install UV
      shell: bash
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install Claude Code CLI
      shell: bash
      run: |
        npm install -g @anthropic-ai/claude-code

    - name: Install dependencies
      shell: bash
      run: |
        cd ${{ github.action_path }}
        uv sync

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Run auto-docs action
      shell: bash
      env:
        ANTHROPIC_API_KEY: ${{ inputs.anthropic_api_key }}
        CLAUDE_COMMAND: ${{ inputs.claude_command }}
        MAX_RETRIES: ${{ inputs.max_retries }}
      run: |
        # Run the action in the target repository directory
        cd $GITHUB_WORKSPACE
        echo "🔍 Starting auto-docs action..."
        # Run the Python script with real-time output
        echo "🚀 Running auto-docs script..."
        ${{ github.action_path }}/.venv/bin/python ${{ github.action_path }}/main.py
        exit_code=$?

        echo ""
        echo "📊 Python script exit code: $exit_code"

        # Python script handles setting GitHub Actions outputs directly

        # Push changes if script succeeded and created commits
        if [ $exit_code -eq 0 ]; then
          # Check if there are any commits to push
          if git diff --quiet HEAD~1 2>/dev/null; then
            echo "No new commits to push"
          else
          # Safety check: Verify this is still the latest commit before pushing
          BRANCH="${GITHUB_REF_NAME}"
          CURRENT_REMOTE_SHA=$(git ls-remote origin refs/heads/$BRANCH | awk '{print $1}')
          if [ "$CURRENT_REMOTE_SHA" != "$GITHUB_SHA" ]; then
            echo "This is not the latest commit on $BRANCH. Another commit was pushed while processing. Exiting safely."
            exit 0
          fi

            echo "Pushing docstring updates to repository..."
            git push origin HEAD
          fi
        else
          echo "Python script failed, not pushing changes"
        fi

        exit $exit_code
